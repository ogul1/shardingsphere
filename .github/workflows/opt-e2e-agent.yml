#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

name: Modified E2E - Agent
env:
  MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.class=standard
    -Dmaven.wagon.http.retryHandler.count=3 -Dspotless.apply.skip=true
jobs:
  global-environment:
    name: Import Global Environment
    uses: ./.github/workflows/required-reusable.yml
  build-e2e-image:
    name: build-e2e-image
    needs: global-environment
    runs-on: ${{ needs.global-environment.outputs.GLOBAL_RUNS_ON }}
    timeout-minutes: 20
    steps:
    - name: Setup Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |-
        python -m pip install --upgrade pip
        pip install inotify
    - name: Run inotifywait
      run: |-
        python3 -c "
        import inotify.adapters
        import inotify.constants
        import os
        from datetime import datetime, timezone
        with open('/home/runner/inotifywait-log-build-e2e-image.csv', 'w') as log_file:
          i = inotify.adapters.InotifyTree('/home/runner/work/shardingsphere/shardingsphere', inotify.constants.IN_CREATE | inotify.constants.IN_ACCESS)
          for event in i.event_gen(yield_nones=False):
            (_, type_names, path, filename) = event
            now = datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%S.%f') + 'Z'
            events = ','.join(type_names)
            log_file.write(f'{now};{path};{filename};{events}\n')
            log_file.flush()
            os.fsync(log_file.fileno())
        " &
    - uses: actions/checkout@v4
    - run: touch optcd-3.txt
    - uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 21
    - run: touch optcd-4.txt
    - uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ needs.global-environment.outputs.GLOBAL_CACHE_PREFIX }}-maven-third-party-e2e-cache-${{
          github.sha }}
        restore-keys: |-
          ${{ needs.global-environment.outputs.GLOBAL_CACHE_PREFIX }}-maven-third-party-e2e-cache-
          ${{ needs.global-environment.outputs.GLOBAL_CACHE_PREFIX }}-maven-third-party-
    - run: touch optcd-5.txt
    - name: Build Project
      run: ./mvnw -B clean install -DskipTests -Prelease
    - run: touch optcd-6.txt
    - name: Build Proxy E2E Image
      run: ./mvnw clean install -DskipTests -Pit.env.proxy -f test/e2e/agent/engine/pom.xml
    - run: touch optcd-7.txt
    - name: Save Proxy E2E Image
      run: docker save -o /tmp/${{ needs.global-environment.outputs.GLOBAL_CACHE_PREFIX
        }}-proxy-agent-test.tar apache/shardingsphere-proxy-agent-test:latest
    - run: touch optcd-8.txt
    - uses: actions/upload-artifact@v4
      with:
        name: proxy-e2e-image
        path: /tmp/${{ needs.global-environment.outputs.GLOBAL_CACHE_PREFIX }}-proxy-agent-test.tar
        retention-days: 10
    - run: touch optcd-9.txt
    - name: Build JDBC E2E Image
      run: ./mvnw clean install -DskipTests -Pit.env.jdbc -f test/e2e/agent/engine/pom.xml
    - run: touch optcd-10.txt
    - name: Save JDBC E2E Image
      run: docker save -o /tmp/${{ needs.global-environment.outputs.GLOBAL_CACHE_PREFIX
        }}-jdbc-agent-test.tar apache/shardingsphere-jdbc-agent-test:latest
    - run: touch optcd-11.txt
    - uses: actions/upload-artifact@v4
      with:
        name: jdbc-e2e-image
        path: /tmp/${{ needs.global-environment.outputs.GLOBAL_CACHE_PREFIX }}-jdbc-agent-test.tar
        retention-days: 10
    - run: touch optcd-12.txt
    - name: Upload inotifywait logs
      uses: actions/upload-artifact@v4
      with:
        name: inotifywait-build-e2e-image
        path: /home/runner/inotifywait-log-build-e2e-image.csv
  agent-mysql:
    name: agent-mysql ()
    needs:
    - global-environment
    - build-e2e-image
    runs-on: ${{ needs.global-environment.outputs.GLOBAL_RUNS_ON }}
    timeout-minutes: 15
    strategy:
      max-parallel: 20
      fail-fast: false
      matrix:
        include:
        - adapter: proxy
          feature: tracing
          plugin: jaeger
        - adapter: proxy
          feature: tracing
          plugin: zipkin
        - adapter: proxy
          feature: metrics
          plugin: prometheus
        - adapter: proxy
          feature: logging
          plugin: file
        - adapter: jdbc
          feature: logging
          plugin: file
        - adapter: jdbc
          feature: metrics
          plugin: prometheus
        - adapter: jdbc
          feature: tracing
          plugin: jaeger
        - adapter: jdbc
          feature: tracing
          plugin: zipkin
    steps:
    - name: Setup Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |-
        python -m pip install --upgrade pip
        pip install inotify
    - name: Run inotifywait
      run: |-
        python3 -c "
        import inotify.adapters
        import inotify.constants
        import os
        from datetime import datetime, timezone
        with open('/home/runner/inotifywait-log-agent-mysql ().csv', 'w') as log_file:
          i = inotify.adapters.InotifyTree('/home/runner/work/shardingsphere/shardingsphere', inotify.constants.IN_CREATE | inotify.constants.IN_ACCESS)
          for event in i.event_gen(yield_nones=False):
            (_, type_names, path, filename) = event
            now = datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%S.%f') + 'Z'
            events = ','.join(type_names)
            log_file.write(f'{now};{path};{filename};{events}\n')
            log_file.flush()
            os.fsync(log_file.fileno())
        " &
    - uses: actions/checkout@v4
    - run: touch optcd-3.txt
    - uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 21
    - run: touch optcd-4.txt
    - uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ needs.global-environment.outputs.GLOBAL_CACHE_PREFIX }}-maven-third-party-${{
          hashFiles('**/pom.xml') }}
        restore-keys: |-
          ${{ needs.global-environment.outputs.GLOBAL_CACHE_PREFIX }}-maven-third-party-
    - run: touch optcd-5.txt
    - name: Download Proxy E2E Image
      uses: actions/download-artifact@v4
      with:
        name: proxy-e2e-image
        path: /tmp/
    - run: touch optcd-6.txt
    - name: Load Proxy E2E Image
      run: docker load -i /tmp/${{ needs.global-environment.outputs.GLOBAL_CACHE_PREFIX
        }}-proxy-agent-test.tar
    - run: touch optcd-7.txt
    - name: Download JDBC E2E Image
      uses: actions/download-artifact@v4
      with:
        name: jdbc-e2e-image
        path: /tmp/
    - run: touch optcd-8.txt
    - name: Load JDBC E2E Image
      run: docker load -i /tmp/${{ needs.global-environment.outputs.GLOBAL_CACHE_PREFIX
        }}-jdbc-agent-test.tar
    - run: touch optcd-9.txt
    - name: Build Project
      run: ./mvnw -B clean install -am -pl test/e2e/agent/plugins/${{ matrix.feature
        }}/${{ matrix.plugin }} -DskipTests
    - run: touch optcd-10.txt
    - name: Run E2E Test
      run: ./mvnw -nsu -B clean install -f test/e2e/agent/plugins/${{ matrix.feature
        }}/${{ matrix.plugin }}/pom.xml -Dit.env.adapter=${{ matrix.adapter }} -Dit.env.plugin=${{
        matrix.plugin }}
    - run: touch optcd-11.txt
    - name: Upload inotifywait logs
      uses: actions/upload-artifact@v4
      with:
        name: inotifywait-agent-mysql ()
        path: /home/runner/inotifywait-log-agent-mysql ().csv
'on':
- push
- workflow_dispatch
