#
# Licensed to the Apache Software Foundation (ASF) under one or more
# contributor license agreements.  See the NOTICE file distributed with
# this work for additional information regarding copyright ownership.
# The ASF licenses this file to You under the Apache License, Version 2.0
# (the "License"); you may not use this file except in compliance with
# the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# Fix me #25051
#scenario: [ dbtbl_with_readwrite_splitting, dbtbl_with_readwrite_splitting_and_encrypt, sharding_and_encrypt, encrypt_and_readwrite_splitting, encrypt_shadow, readwrite_splitting_and_shadow, sharding_and_shadow, sharding_encrypt_shadow, mask_encrypt, mask_sharding, mask_encrypt_sharding ]

name: Modified E2E - SQL
env:
  MAVEN_OPTS: -Dhttp.keepAlive=false -Dmaven.wagon.http.pool=false -Dmaven.wagon.http.retryHandler.class=standard
    -Dmaven.wagon.http.retryHandler.count=3 -Dspotless.apply.skip=true
  SEGMENT_DOWNLOAD_TIMEOUT_MINS: 1
jobs:
  global-environment:
    name: Import Global Environment
    uses: ./.github/workflows/required-reusable.yml
  build-e2e-image:
    name: build-e2e-image
    needs: global-environment
    runs-on: ${{ needs.global-environment.outputs.GLOBAL_RUNS_ON }}
    timeout-minutes: 40
    steps:
    - name: Setup Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |-
        python -m pip install --upgrade pip
        pip install inotify
    - name: Run inotifywait
      run: |-
        python3 -c "
        import inotify.adapters
        import inotify.constants
        import os
        from datetime import datetime, timezone
        with open('/home/runner/inotifywait-log-build-e2e-image.csv', 'w') as log_file:
          i = inotify.adapters.InotifyTree('/home/runner/work/shardingsphere/shardingsphere', inotify.constants.IN_CREATE | inotify.constants.IN_ACCESS)
          for event in i.event_gen(yield_nones=False):
            (_, type_names, path, filename) = event
            now = datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%S.%f') + 'Z'
            events = ','.join(type_names)
            log_file.write(f'{now};{path};{filename};{events}\n')
            log_file.flush()
            os.fsync(log_file.fileno())
        " &
    - uses: actions/checkout@v4
    - run: touch optcd-3.txt
    - uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 11
    - run: touch optcd-4.txt
    - uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ needs.global-environment.outputs.GLOBAL_CACHE_PREFIX }}-maven-third-party-e2e-cache-${{
          github.sha }}
        restore-keys: |-
          ${{ needs.global-environment.outputs.GLOBAL_CACHE_PREFIX }}-maven-third-party-e2e-cache-
          ${{ needs.global-environment.outputs.GLOBAL_CACHE_PREFIX }}-maven-third-party-
    - run: touch optcd-5.txt
    - name: Build E2E Image
      run: ./mvnw -B clean install -am -pl test/e2e/sql -Pit.env.docker -DskipTests
        -Dspotless.apply.skip=true
    - run: touch optcd-6.txt
    - name: Save E2E Image
      run: docker save -o /tmp/${{ needs.global-environment.outputs.GLOBAL_CACHE_PREFIX
        }}-proxy-test.tar apache/shardingsphere-proxy-test:latest
    - run: touch optcd-7.txt
    - uses: actions/upload-artifact@v4
      with:
        name: e2e-image
        path: /tmp/${{ needs.global-environment.outputs.GLOBAL_CACHE_PREFIX }}-proxy-test.tar
        retention-days: 10
    - run: touch optcd-8.txt
    - name: Upload inotifywait logs
      uses: actions/upload-artifact@v4
      with:
        name: inotifywait-build-e2e-image
        path: /home/runner/inotifywait-log-build-e2e-image.csv
  e2e-sql:
    name: e2e-sql (${{ matrix.adapter }}, ${{ matrix.mode }}, ${{ matrix.database
      }}, ${{ matrix.scenario }}, ${{ matrix.additional-options }})
    needs:
    - build-e2e-image
    - global-environment
    runs-on: ${{ needs.global-environment.outputs.GLOBAL_RUNS_ON }}
    timeout-minutes: 30
    strategy:
      max-parallel: 20
      fail-fast: false
      matrix:
        adapter:
        - proxy
        - jdbc
        mode:
        - Standalone
        - Cluster
        database:
        - MySQL
        - PostgreSQL
        scenario:
        - empty_rules
        - distsql_rdl
        - passthrough
        - db
        - tbl
        - encrypt
        - readwrite_splitting
        - shadow
        - mask
        - dbtbl_with_readwrite_splitting_and_encrypt
        - sharding_and_encrypt
        - encrypt_and_readwrite_splitting
        - encrypt_shadow
        - readwrite_splitting_and_shadow
        - sharding_and_shadow
        - sharding_encrypt_shadow
        - mask_encrypt
        - mask_sharding
        - mask_encrypt_sharding
        - db_tbl_sql_federation
        - empty_storage_units
        additional-options:
        - ''
        include:
        - adapter: proxy
          database: MySQL
          scenario: passthrough
          additional-options: -Dmysql-connector-java.version=8.3.0
        exclude:
        - adapter: jdbc
          scenario: passthrough
        - adapter: jdbc
          mode: Cluster
        - adapter: proxy
          mode: Standalone
          scenario: empty_rules
        - adapter: proxy
          mode: Standalone
          scenario: distsql_rdl
        - adapter: proxy
          mode: Standalone
          scenario: passthrough
        - adapter: proxy
          scenario: empty_storage_units
    steps:
    - name: Setup Python 3.10
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
    - name: Install dependencies
      run: |-
        python -m pip install --upgrade pip
        pip install inotify
    - name: Run inotifywait
      run: |-
        python3 -c "
        import inotify.adapters
        import inotify.constants
        import os
        from datetime import datetime, timezone
        with open('/home/runner/inotifywait-log-e2e-sql (${{ matrix.adapter }}, ${{ matrix.mode }}, ${{ matrix.database }}, ${{ matrix.scenario }}, ${{ matrix.additional-options }}).csv', 'w') as log_file:
          i = inotify.adapters.InotifyTree('/home/runner/work/shardingsphere/shardingsphere', inotify.constants.IN_CREATE | inotify.constants.IN_ACCESS)
          for event in i.event_gen(yield_nones=False):
            (_, type_names, path, filename) = event
            now = datetime.now(timezone.utc).strftime('%Y-%m-%dT%H:%M:%S.%f') + 'Z'
            events = ','.join(type_names)
            log_file.write(f'{now};{path};{filename};{events}\n')
            log_file.flush()
            os.fsync(log_file.fileno())
        " &
    - uses: actions/checkout@v4
    - run: touch optcd-3.txt
    - uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ needs.global-environment.outputs.GLOBAL_CACHE_PREFIX }}-maven-third-party-e2e-cache-${{
          github.sha }}
    - run: touch optcd-4.txt
    - uses: actions/setup-java@v4
      with:
        distribution: temurin
        java-version: 11
    - run: touch optcd-5.txt
    - name: Download E2E Image
      uses: actions/download-artifact@v4
      with:
        name: e2e-image
        path: /tmp/
    - run: touch optcd-6.txt
    - name: Load E2E Image
      run: docker load -i /tmp/${{ needs.global-environment.outputs.GLOBAL_CACHE_PREFIX
        }}-proxy-test.tar
    - run: touch optcd-7.txt
    - name: Run E2E Test
      run: ./mvnw -nsu -B install -f test/e2e/sql/pom.xml -Dspotless.apply.skip=true
        -Dit.cluster.env.type=DOCKER -Dit.cluster.adapters=${{ matrix.adapter }} -Dit.run.modes=${{
        matrix.mode }} -Dit.run.additional.cases=false -Dit.scenarios=${{ matrix.scenario
        }} -Dit.cluster.databases=${{ matrix.database }} ${{ matrix.additional-options
        }}
    - run: touch optcd-8.txt
    - name: Upload inotifywait logs
      uses: actions/upload-artifact@v4
      with:
        name: inotifywait-e2e-sql (${{ matrix.adapter }}, ${{ matrix.mode }}, ${{
          matrix.database }}, ${{ matrix.scenario }}, ${{ matrix.additional-options
          }})
        path: /home/runner/inotifywait-log-e2e-sql (${{ matrix.adapter }}, ${{ matrix.mode
          }}, ${{ matrix.database }}, ${{ matrix.scenario }}, ${{ matrix.additional-options
          }}).csv
'on':
- push
- workflow_dispatch
